name: CI/CD Pipeline for AfyaTrack KE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: weddynkatha265/afyatrack-ke

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm ci
      working-directory: app
    - name: Run tests
      run: npm test
      working-directory: app

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker images with ISO timestamp
      run: |
        # ISO 8601 format: 2024-01-15T10-30-45Z
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        
        docker build \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TIMESTAMP \
          .
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push Docker images
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TIMESTAMP
    
    - name: Deployment summary
      run: |
        echo "üéâ Docker Images Successfully Pushed!"
        echo "======================================"
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è Tag:"
        echo "  - $TIMESTAMP (ISO timestamp)"
        echo ""
        echo "üîó View: https://hub.docker.com/r/weddynkatha265/afyatrack-ke/tags"


  # STAGE 3: Deploy to AWS EC2 (VM from Task 3)
  deploy-to-vm:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH connection to EC2
      run: |
        # Create SSH directory and key file
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh

        # Save the SSH private key from GitHub secret
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
        chmod 600 ~/.ssh/ec2_key.pem
        
        # Get EC2 IP from Terraform output (you'll set this as secret)
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        
        # Test SSH connection
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ubuntu@$EC2_IP "echo '‚úÖ SSH connection successful'"

    - name: Deploy application to EC2
      run: |
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ubuntu@$EC2_IP "
          # Stop and remove any existing container
          sudo docker stop afyatrack-app || true
          sudo docker rm afyatrack-app || true
          
          # Pull the latest image from Docker Hub
          sudo docker pull $DOCKER_REGISTRY/$IMAGE_NAME:latest
          
          # Run the new container
          sudo docker run -d \
            --name afyatrack-app \
            -p 3000:3000 \
            -p 80:3000 \
            --restart unless-stopped \
            $DOCKER_REGISTRY/$IMAGE_NAME:latest
          
          echo '‚úÖ Application deployed successfully'
        "

    - name: Verify deployment
      run: |
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        echo "üåê Testing application at: http://$EC2_IP:3000"
        
        # Wait for app to start
        sleep 30
        
        # Test the application
        curl -f http://$EC2_IP:3000/health || echo "‚ùå Health check failed"
        echo "‚úÖ Deployment verified!"