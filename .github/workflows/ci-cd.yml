# 

name: CI/CD Pipeline for AfyaTrack KE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: weddynkatha265/afyatrack-ke

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm ci
      working-directory: app
    - name: Run tests
      run: npm test
      working-directory: app

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker images with ISO timestamp
      run: |
        # ISO 8601 format: 2024-01-15T10-30-45Z
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        
        docker build \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TIMESTAMP \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          .
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push Docker images
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TIMESTAMP
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    
    - name: Deployment summary
      run: |
        echo "üéâ Docker Images Successfully Pushed!"
        echo "======================================"
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è Tags:"
        echo "  - $TIMESTAMP (ISO timestamp)"
        echo "  - latest"
        echo ""
        echo "üîó View: https://hub.docker.com/r/weddynkatha265/afyatrack-ke/tags"

  deploy-to-vm:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH connection to EC2
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Save the SSH private key from GitHub secret
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
        chmod 600 ~/.ssh/ec2_key.pem
        
        # Get EC2 IP from secret
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        
        # Add to known hosts to avoid prompt
        ssh-keyscan -H $EC2_IP >> ~/.ssh/known_hosts
        
        # Test SSH connection
        ssh -i ~/.ssh/ec2_key.pem ubuntu@$EC2_IP "echo '‚úÖ SSH connection successful'"

    - name: Copy database files to EC2
      run: |
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        
        # Create directory on EC2
        ssh -i ~/.ssh/ec2_key.pem ubuntu@$EC2_IP "mkdir -p /home/ubuntu/afyatrack-ke/database"
        
        # Copy database initialization script
        scp -i ~/.ssh/ec2_key.pem database/init.sql ubuntu@$EC2_IP:/home/ubuntu/afyatrack-ke/database/
        
        echo "‚úÖ Database files copied to EC2"

    - name: Deploy with Pure Docker
      run: |
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        
        ssh -i ~/.ssh/ec2_key.pem ubuntu@$EC2_IP "
          # Create Docker network if it doesn't exist
          sudo docker network create afyanet || true
          
          # Stop and remove existing containers
          echo 'üõë Stopping existing containers...'
          sudo docker stop afyatrack-web-app afyatrack-database || true
          sudo docker rm afyatrack-web-app afyatrack-database || true
          
          # Clean up unused volumes and networks
          sudo docker volume prune -f || true
          
          # Start PostgreSQL database
          echo 'üêò Starting PostgreSQL database...'
          sudo docker run -d \
            --name afyatrack-database \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=hospitals \
            -v postgres_data:/var/lib/postgresql/data \
            -v /home/ubuntu/afyatrack-ke/database/init.sql:/docker-entrypoint-initdb.d/init.sql \
            --network afyanet \
            --restart unless-stopped \
            postgres:13-alpine
          
          # Wait for database to be ready
          echo '‚è≥ Waiting for database to start (30 seconds)...'
          sleep 30
          
          # Check if database is ready
          echo 'üîç Checking database status...'
          sudo docker exec afyatrack-database pg_isready -U postgres && echo '‚úÖ Database is ready' || echo '‚ùå Database not ready'
          
          # Pull and start the application
          echo 'üöÄ Starting application...'
          sudo docker pull weddynkatha265/afyatrack-ke:latest
          
          sudo docker run -d \
            --name afyatrack-web-app \
            -p 3000:3000 \
            -e DB_HOST=afyatrack-database \
            -e DB_USER=postgres \
            -e DB_PASSWORD=password \
            -e DB_NAME=hospitals \
            -e NODE_ENV=production \
            --network afyanet \
            --restart unless-stopped \
            weddynkatha265/afyatrack-ke:latest
          
          echo '‚úÖ Application deployed with Docker commands'
          
          # Show running containers
          echo 'üìã Running containers:'
          sudo docker ps
        "

    - name: Wait for application to start
      run: |
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        echo '‚è≥ Waiting for application to start (30 seconds)...'
        sleep 30

    - name: Verify deployment
      run: |
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        
        # Check container status
        ssh -i ~/.ssh/ec2_key.pem ubuntu@$EC2_IP "
          echo '=== Container Status ==='
          sudo docker ps
          echo ''
          echo '=== Web Application Logs (last 15 lines) ==='
          sudo docker logs afyatrack-web-app --tail 15
          echo ''
          echo '=== Database Logs (last 10 lines) ==='
          sudo docker logs afyatrack-database --tail 10
        "
        
        # Test the application health endpoint
        echo 'üåê Testing application health endpoint...'
        MAX_RETRIES=12
        RETRY_COUNT=0
        SUCCESS=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_IP:3000/health || echo "000")
          
          if [ "$RESPONSE" = "200" ]; then
            echo '‚úÖ Application health check passed! (HTTP 200)'
            SUCCESS=true
            break
          else
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo '‚è≥ Application not ready yet... ('$RETRY_COUNT'/'$MAX_RETRIES') - HTTP Status: '$RESPONSE
            
            # If failing, check application logs
            if [ $RETRY_COUNT -eq 3 ] || [ $RETRY_COUNT -eq 6 ] || [ $RETRY_COUNT -eq 9 ]; then
              echo 'üí° Checking application logs...'
              ssh -i ~/.ssh/ec2_key.pem ubuntu@$EC2_IP "sudo docker logs afyatrack-web-app --tail 10"
            fi
            
            sleep 10
          fi
        done
        
        if [ "$SUCCESS" = false ]; then
          echo '‚ùå Application health check failed after maximum retries'
          echo 'üîç Final application logs:'
          ssh -i ~/.ssh/ec2_key.pem ubuntu@$EC2_IP "sudo docker logs afyatrack-web-app --tail 30"
          exit 1
        fi

    - name: Test full application functionality
      run: |
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        
        echo 'üß™ Testing full application functionality...'
        
        # Test the main page
        MAIN_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_IP:3000/ || echo "000")
        if [ "$MAIN_RESPONSE" = "200" ]; then
          echo '‚úÖ Main page loaded successfully'
        else
          echo '‚ö†Ô∏è Main page returned HTTP '$MAIN_RESPONSE
        fi
        
        # Test database connectivity through the app
        echo 'üîç Testing database connectivity...'
        ssh -i ~/.ssh/ec2_key.pem ubuntu@$EC2_IP "
          sudo docker exec afyatrack-database psql -U postgres -d hospitals -c 'SELECT COUNT(*) FROM hospitals;'
        "

    - name: Final deployment status
      run: |
        EC2_IP="${{ secrets.EC2_PUBLIC_IP }}"
        echo ''
        echo 'üéä DEPLOYMENT COMPLETED SUCCESSFULLY!'
        echo '====================================='
        echo 'üì¶ Application: AfyaTrack KE - Kenya Hospital Registry'
        echo 'üåê URL: http://'$EC2_IP':3000'
        echo 'üñ•Ô∏è  Server: AWS EC2 Instance ('$EC2_IP')'
        echo 'üê≥ Technology: Docker Containers'
        echo 'üóÑÔ∏è  Database: PostgreSQL with Sample Data'
        echo 'üöÄ Deployment: Pure Docker Commands (No Docker Compose)'
        echo '‚è∞ Completed: $(date -u)'
        echo ''
        echo 'üîç Management Commands:'
        echo '   Check status:    ssh -i ~/.ssh/ec2_key.pem ubuntu@'$EC2_IP' \"sudo docker ps\"'
        echo '   App logs:        ssh -i ~/.ssh/ec2_key.pem ubuntu@'$EC2_IP' \"sudo docker logs afyatrack-web-app -f\"'
        echo '   DB logs:         ssh -i ~/.ssh/ec2_key.pem ubuntu@'$EC2_IP' \"sudo docker logs afyatrack-database\"'
        echo '   Test health:     curl http://'$EC2_IP':3000/health'
        echo '   Visit app:       http://'$EC2_IP':3000'
        echo ''
        echo 'üí° The application is now live and accessible!'